import streamlit as st
import joblib
import numpy as np

# Load your pre-trained model
model = joblib.load('model.joblib')

# Define a prediction function
def predict_income(features):
    input_data = np.array([features])
    predictions = model.predict(input_data)
    return "income>=50k" if predictions[0] == 1 else "income<=50k"

# Main function for Streamlit
def main():
    st.title("Income Prediction App")

    # Create input fields for all the required features
    age = st.number_input("Age", min_value=0, max_value=120)
    education_num = st.number_input("Education Level (numeric)", min_value=0, max_value=20)
    sex = st.selectbox("Sex", options=["Male", "Female"])
    capital_gain = st.number_input("Capital Gain", min_value=0)
    capital_loss = st.number_input("Capital Loss", min_value=0)
    hours_per_week = st.number_input("Hours per Week", min_value=0, max_value=168)

    # One-hot encoded categorical inputs (streamlit dropdowns)
    occupation = st.selectbox(
        "Occupation",
        ["Exec-managerial", "Other-service", "Prof-specialty", "Self-emp-inc"]
    )

    marital_status = st.selectbox(
        "Marital Status",
        ["Divorced", "Married-civ-spouse", "Never-married"]
    )

    relationship = st.selectbox(
        "Relationship",
        ["Husband", "Not-in-family", "Own-child", "Unmarried", "Wife"]
    )

    # Add the new workclass__Self-emp-inc field
    workclass = st.selectbox(
        "Workclass",
        ["Self-emp-inc", "Other"]
    )

    # Mapping the categorical inputs to one-hot encoding (ensuring feature alignment)
    occupation_mapping = {
        "Exec-managerial": [1, 0, 0],  # Exec-managerial, Other-service, Prof-specialty
        "Other-service": [0, 1, 0],
        "Prof-specialty": [0, 0, 1],
        "Self-emp-inc": [0, 0, 0]  # No explicit encoding for Self-emp-inc (only in workclass)
    }

    marital_status_mapping = {
        "Divorced": [1, 0, 0],  # Divorced, Married-civ-spouse, Never-married
        "Married-civ-spouse": [0, 1, 0],
        "Never-married": [0, 0, 1]
    }

    relationship_mapping = {
        "Husband": [1, 0, 0, 0, 0],  # Husband, Not-in-family, Own-child, Unmarried, Wife
        "Not-in-family": [0, 1, 0, 0, 0],
        "Own-child": [0, 0, 1, 0, 0],
        "Unmarried": [0, 0, 0, 1, 0],
        "Wife": [0, 0, 0, 0, 1]
    }

    # Map workclass (Self-emp-inc is binary)
    workclass_mapping = 1 if workclass == "Self-emp-inc" else 0

    # Combine all the features into a single list for prediction
    features = [
        age,
        education_num,
        1 if sex == "Male" else 0,  # Assuming 1 for Male and 0 for Female
        capital_gain,
        capital_loss,
        hours_per_week
    ] + occupation_mapping[occupation] + [workclass_mapping] + marital_status_mapping[marital_status] + relationship_mapping[relationship]

    # Create a button for prediction
    if st.button("Predict Income"):
        prediction = predict_income(features)
        st.write(f"The predicted income category is: {prediction}")

if __name__ == "__main__":
    main()
